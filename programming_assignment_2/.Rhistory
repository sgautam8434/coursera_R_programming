setwd("~/GitHub/coursera_R_programming/programming_assignment_2")
makeCacheMatrix <- function(x = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(y) {
x <<- y
cacheMatrix <<- NULL
}
getMatrix() <- function() x
setCache <- function(inverse) cacheMatrix <<- inverse
getCache <- function() cacheMatrix
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setCache = setCache,
getCache = getCache)
}
cacheSolve <- function(x, ...) {
cacheMatrix <- x$getCache()
if (!is.null(cacheMatrix)) {
message("Load: cache matrix.")
return(cacheMatrix)
}
else {
dMatrix <- x$getMatrix()
cacheMatrix <- solve(dMatrix, ...)
x$setCache(cacheMatrix)
return(cacheMatrix)
}
makeCacheMatrix <- function(x = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(y) {
x <<- y
cacheMatrix <<- NULL
}
getMatrix() <- function() x
setCache <- function(inverse) cacheMatrix <<- inverse
getCache <- function() cacheMatrix
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setCache = setCache,
getCache = getCache)
}
cacheSolve <- function(x, ...) {
cacheMatrix <- x$getCache()
if (!is.null(cacheMatrix)) {
message("Load: cache matrix.")
return(cacheMatrix)
}
else {
dMatrix <- x$getMatrix()
cacheMatrix <- solve(dMatrix, ...)
x$setCache(cacheMatrix)
return(cacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
cacheMatrix <- NULL
setMatrix <- function(y) {
x <<- y
cacheMatrix <<- NULL
}
getMatrix() <- function() x
setCache <- function(inverse) cacheMatrix <<- inverse
getCache <- function() cacheMatrix
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setCache = setCache,
getCache = getCache)
}
cacheSolve <- function(x, ...) {
cacheMatrix <- x$getCache()
if (!is.null(cacheMatrix)) {
message("Load: cache matrix.")
return(cacheMatrix)
}
else {
dMatrix <- x$getMatrix()
cacheMatrix <- solve(dMatrix, ...)
x$setCache(cacheMatrix)
return(cacheMatrix)
}
}
best("SC", "heart attack")
